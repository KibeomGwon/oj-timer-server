name: Java CI with Gradle

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      write-all
    services:
      mysql:
        image: ggibeom/oj-timer-mysql:0.2
        ports:
          - 3306:3306
        env:
#          MYSQL_DATABASE: oj_timer
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}

        # health check
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - uses: actions/checkout@v4




        if: contains(github.event.head_commit.message, '배포')
      - name: Check Git Commit Message
        run:


jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      write-all
    steps:
      - uses: actions/checkout@v4

      - name: Create Docker Network
        run: docker network create oj-timer-network  # ✅ 사용자 정의 네트워크 생성


      - name: Get Docker Image
        run: |
          docker pull ggibeom/oj-timer-mysql:0.2

      - name: Run MySQL Container
        run: |
          docker run -d \
            --name mysql-container \
            --network oj-timer-network \
            -e MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} \
            -p 3306:3306 \
            ggibeom/oj-timer-mysql:0.2

      - name: Check MySQL Logs
        run: docker logs mysql-container

      - name: .env setting
        run: |
          echo "DATABASE_URL_ENV = ${{ secrets.DATABASE_URL }}" >> .env
          echo "DATABASE_USERNAME_ENV = ${{ secrets.DATABASE_USERNAME }}" >> .env
          echo "GOOGLE_EMAIL_ENV = ${{ secrets.GOOGLE_EMAIL }}" >> .env
          echo "GOOGLE_PASSWORD_ENV = ${{ secrets.GOOGLE_PASSWORD }}" >> .env
          echo "JWT.SECRETKEY_ENV = ${{ secrets.DATABASE_URL }}" >> .env
          echo "DATABASE_PASSWORD_ENV = ${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Run Tests
        run: ./gradlew test --info

      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        if: failure()  # 테스트 실패 시에만 실행
        with:
          name: test-reports
          path: build/reports/tests/test/

      - name: Build
        run: ./gradlew build --stacktrace

        if: contains(github.event.head_commit.message, '배포')
      - name: Check Git Commit Message
        run: ls
