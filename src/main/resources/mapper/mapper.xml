<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oj_timer.server.repository.mybatis.mapper.SubmissionMapper">

    <select id="findRecentSubmissions" resultType="MybatisSubmissionDto">
        select distinct p.problem_id, email, max_submission_time as recent_submission_time, problem_title_id as title, level, site, link, language, username
        from (
            select problem_id, max(submission_time) as max_submission_time, s.member_id, email
            from submission s
            join member m on s.member_id = m.member_id
            where email = #{condition.email}
            group by problem_id, s.member_id
            ) max_s
        join problem p on p.problem_id = max_s.problem_id
        join submission s on s.problem_id = p.problem_id and max_s.max_submission_time = s.submission_time and max_s.member_id = s.member_id
        <where>
            <if test="condition.title != null and condition.title != ''">
                title like concat('%',#{condition.title},'%')
            </if>
            <if test="condition.site != null and condition.site != ''">
                and site like #{condition.site}
            </if>
            <if test="condition.language != null and condition.language != ''">
                and language like #{condition.language}
            </if>
            <if test="condition.level != null and condition.level !=''">
                and level like #{condition.level}
            </if>
        </where>
        order by recent_submission_time desc
        limit #{offset}, ${limit};

    </select>

    <select id="recentSubmissionsCount" resultType="long">
        select count(*)
        from (
                 select s.problem_id
                 from submission s
                          join member m on s.member_id = m.member_id
                          join problem p on p.problem_id = s.problem_id
                 <where>
                     email like #{condition.email}
                     <if test="condition.title != null and condition.title != ''">
                         and title like concat('%',#{condition.title},'%')
                     </if>
                     <if test="condition.site != null and condition.site != ''">
                         and site like #{condition.site}
                     </if>
                     <if test="condition.language != null and condition.language != ''">
                         and language like #{condition.language}
                     </if>
                     <if test="condition.level != null and condition.level !=''">
                         and level like #{condition.level}
                     </if>
                 </where>
                 group by s.problem_id) a;
    </select>
</mapper>